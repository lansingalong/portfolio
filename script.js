/** * animOnScroll.js v1.0.0 * http://www.codrops.com * * Licensed under the MIT license. * http://www.opensource.org/licenses/mit-license.php * * Copyright 2013, Codrops * http://www.codrops.com */ ;( function( window ) {'use strict'; var docElem = window.document.documentElement; function getViewportH() {var client = docElem['clientHeight'], inner = window['innerHeight']; if( client < inner ) return inner; else return client; } function scrollY() {return window.pageYOffset || docElem.scrollTop; } function getOffset( el ) {var offsetTop = 0, offsetLeft = 0; do {if ( !isNaN( el.offsetTop ) ) {offsetTop += el.offsetTop; } if ( !isNaN( el.offsetLeft ) ) {offsetLeft += el.offsetLeft; } } while( el = el.offsetParent ) return {top : offsetTop, left : offsetLeft } } function inViewport( el, h ) {var elH = el.offsetHeight, scrolled = scrollY(), viewed = scrolled + getViewportH(), elTop = getOffset(el).top, elBottom = elTop + elH, h = h || 0; return (elTop + elH * h) <= viewed && (elBottom - elH * h) >= scrolled; } function extend( a, b ) {for( var key in b ) {if( b.hasOwnProperty( key ) ) {a[key] = b[key]; } } return a; } function onScrollHandler() {var self = this; if( !this.didScroll ) {this.didScroll = true; setTimeout( function() { self._scrollPage(); }, 60 ); } }; function AnimOnScroll( el, options ) {this.el = el; this.options = extend( this.defaults, options ); this._onScrollFn = onScrollHandler.bind( this ); this._init(); } if(navigator.appVersion.indexOf('MSIE 8') > 0) {var _slice = Array.prototype.slice; Array.prototype.slice = function() {if(this instanceof Array) {return _slice.apply(this, arguments); } else {var result = []; var start = (arguments.length >= 1) ? arguments[0] : 0; var end = (arguments.length >= 2) ? arguments[1] : this.length; for(var i=start; i<end; i++) {result.push(this[i]); } return result; } }; } if( !Function.prototype.bind ) {Function.prototype.bind = function( oThis ) {if( typeof this !== 'function' ) {throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable'); } var aArgs   = Array.prototype.slice.call( arguments, 1 ), fToBind = this, fNOP    = function() {}, fBound  = function() {return fToBind.apply( this instanceof fNOP ? this : oThis, aArgs.concat( Array.prototype.slice.call( arguments ) ) ); }; fNOP.prototype = this.prototype; fBound.prototype = new fNOP(); return fBound; }; } AnimOnScroll.prototype = {defaults : {minDuration : 0, maxDuration : 0,animationis in the viewport. in the viewport (100% of it) viewportFactor : 0 }, _init : function() {this.items = Array.prototype.slice.call( document.querySelectorAll( '#' + this.el.id + ' > li' ) ); this.itemsCount = this.items.length; this.itemsRenderedCount = 0; this.didScroll = false; var self = this; imagesLoaded( this.el, function() {new Masonry( self.el, {itemSelector: 'li', transitionDuration : 0 } ); if( Modernizr.cssanimations ) {self.items.forEach( function( el, i ) {if( inViewport( el ) ) {self._checkTotalRendered(); classie.add( el, 'shown' ); } } ); window.addEventListener( 'scroll', self._onScrollFn, false ); window.addEventListener( 'resize', function() {self._resizeHandler(); }, false ); } }); }, _scrollPage : function() {var self = this; this.items.forEach( function( el, i ) {if( !classie.has( el, 'shown' ) && !classie.has( el, 'animate' ) && inViewport( el, self.options.viewportFactor ) ) {setTimeout( function() {var perspY = scrollY() + getViewportH() / 2; self.el.style.WebkitPerspectiveOrigin = '50% ' + perspY + 'px'; self.el.style.MozPerspectiveOrigin = '50% ' + perspY + 'px'; self.el.style.perspectiveOrigin = '50% ' + perspY + 'px'; self._checkTotalRendered(); if( self.options.minDuration && self.options.maxDuration ) {var randDuration = ( Math.random() * ( self.options.maxDuration - self.options.minDuration ) + self.options.minDuration ) + 's'; el.style.WebkitAnimationDuration = randDuration; el.style.MozAnimationDuration = randDuration; el.style.animationDuration = randDuration; } classie.add( el, 'animate' ); }, 25 ); } }); this.didScroll = false; }, _resizeHandler : function() {var self = this; function delayed() {self._scrollPage(); self.resizeTimeout = null; } if ( this.resizeTimeout ) {clearTimeout( this.resizeTimeout ); } this.resizeTimeout = setTimeout( delayed, 1000 ); }, _checkTotalRendered : function() {++this.itemsRenderedCount; if( this.itemsRenderedCount === this.itemsCount ) {window.removeEventListener( 'scroll', this._onScrollFn ); } } } window.AnimOnScroll = AnimOnScroll; } )( window );

// init Masonry
var $grid = $('.grid').masonry({
	itemSelector: '.grid-item',
	resize: true,
	fitWidth: true,
	percentPosition: true
});
// layout Masonry after each image loads
$grid.imagesLoaded().progress( function() {
	$grid.masonry('layout');
});